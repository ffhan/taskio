// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TaskApiClient is the client API for TaskApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskApiClient interface {
	GetTask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Task, error)
	SetResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
}

type taskApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskApiClient(cc grpc.ClientConnInterface) TaskApiClient {
	return &taskApiClient{cc}
}

func (c *taskApiClient) GetTask(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.TaskApi/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskApiClient) SetResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.TaskApi/SetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskApiServer is the server API for TaskApi service.
// All implementations must embed UnimplementedTaskApiServer
// for forward compatibility
type TaskApiServer interface {
	GetTask(context.Context, *Request) (*Task, error)
	SetResult(context.Context, *Result) (*Empty, error)
	mustEmbedUnimplementedTaskApiServer()
}

// UnimplementedTaskApiServer must be embedded to have forward compatible implementations.
type UnimplementedTaskApiServer struct {
}

func (UnimplementedTaskApiServer) GetTask(context.Context, *Request) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskApiServer) SetResult(context.Context, *Result) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResult not implemented")
}
func (UnimplementedTaskApiServer) mustEmbedUnimplementedTaskApiServer() {}

// UnsafeTaskApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskApiServer will
// result in compilation errors.
type UnsafeTaskApiServer interface {
	mustEmbedUnimplementedTaskApiServer()
}

func RegisterTaskApiServer(s grpc.ServiceRegistrar, srv TaskApiServer) {
	s.RegisterService(&_TaskApi_serviceDesc, srv)
}

func _TaskApi_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskApiServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskApi/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).GetTask(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskApi_SetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskApiServer).SetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskApi/SetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskApiServer).SetResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TaskApi",
	HandlerType: (*TaskApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _TaskApi_GetTask_Handler,
		},
		{
			MethodName: "SetResult",
			Handler:    _TaskApi_SetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
